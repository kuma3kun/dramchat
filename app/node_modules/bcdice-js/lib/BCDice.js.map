{"version":3,"sources":["../src/BCDice.js"],"names":["BCDice","maker","Opal","BCDiceMaker","$new","_bcdice","$newBcDice","dir","prefix","Error","b","$isKeepSecretDice","$getGameType","diceBot","$setDiceBot","_diceBot","client","message","$setMessage","diceCommand","$dice_command","gameTitle","$setGameByTitle"],"mappings":";;;;;;qjBAAA;;AAEA;;AACA;;;;AACA;;;;;;;;IAEqBA,M;AACjB,sBAAc;AAAA;;AACV,YAAMC,QAAQ,oBAAK;AAAA,mBAAQC,KAAKC,WAAL,CAAiBC,IAAjB,EAAR;AAAA,SAAL,CAAd;AACA,aAAKC,OAAL,GAAe,oBAAK;AAAA,mBAAMJ,MAAMK,UAAN,EAAN;AAAA,SAAL,CAAf;AACH;;AAED;;;;;+BACOC,G,EAAKC,M,EAAQ;AAChB,kBAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH;;;yCAEgBC,C,EAAG;AAAA;;AAChB,gCAAK;AAAA,uBAAM,MAAKL,OAAL,CAAaM,iBAAb,CAA+BD,CAA/B,CAAN;AAAA,aAAL;AACH;;;sCAEa;AAAA;;AACV,mBAAO,oBAAK;AAAA,uBAAM,OAAKL,OAAL,CAAaO,YAAb,EAAN;AAAA,aAAL,CAAP;AACH;;;mCAEUC,O,EAAS;AAAA;;AAChB,gBAAI,CAACA,OAAL,EAAc;;AAEd,gBAAI,EAAEA,oCAAF,CAAJ,EAAmC,MAAM,IAAIJ,KAAJ,CAAU,uBAAV,CAAN;AACnC,gCAAK;AAAA,uBAAM,OAAKJ,OAAL,CAAaS,WAAb,CAAyBD,QAAQE,QAAjC,CAAN;AAAA,aAAL;AACH;;AAED;;;;qCACaC,M,EAAQ;AACjB,kBAAM,IAAIP,KAAJ,CAAU,eAAV,CAAN;AACH;;;mCAEUQ,O,EAAS;AAAA;;AAChB,gCAAK;AAAA,uBAAM,OAAKZ,OAAL,CAAaa,WAAb,CAAyBD,OAAzB,CAAN;AAAA,aAAL;AACH;;AAED;;;;uCACe;AACX,mBAAO,KAAKE,WAAL,EAAP;AACH;;;sCACa;AAAA;;AACV,mBAAO,oBAAK;AAAA,uBAAM,OAAKd,OAAL,CAAae,aAAb,EAAN;AAAA,aAAL,CAAP;AACH;;;uCAEcC,S,EAAW;AAAA;;AACtB,mBAAO,oBAAK;AAAA,uBAAM,OAAKhB,OAAL,CAAaiB,eAAb,CAA6BD,SAA7B,CAAN;AAAA,aAAL,CAAP;AACH;;;;;;kBA7CgBrB,M","file":"BCDice.js","sourcesContent":["/* eslint no-underscore-dangle: off */\n\nimport '../lib/bcdice.ruby.js';\nimport opal from './opal';\nimport DiceBot from './DiceBot';\n\nexport default class BCDice {\n    constructor() {\n        const maker = opal(Opal => Opal.BCDiceMaker.$new());\n        this._bcdice = opal(() => maker.$newBcDice());\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    setDir(dir, prefix) {\n        throw new Error('Unsupported');\n    }\n\n    isKeepSecretDice(b) {\n        opal(() => this._bcdice.$isKeepSecretDice(b));\n    }\n\n    getGameType() {\n        return opal(() => this._bcdice.$getGameType());\n    }\n\n    setDiceBot(diceBot) {\n        if (!diceBot) return;\n\n        if (!(diceBot instanceof DiceBot)) throw new Error('Invalit argument type');\n        opal(() => this._bcdice.$setDiceBot(diceBot._diceBot));\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    setIrcClient(client) {\n        throw new Error('Unimplemented');\n    }\n\n    setMessage(message) {\n        opal(() => this._bcdice.$setMessage(message));\n    }\n\n    // eslint-disable-next-line camelcase\n    dice_command() {\n        return this.diceCommand();\n    }\n    diceCommand() {\n        return opal(() => this._bcdice.$dice_command());\n    }\n\n    setGameByTitle(gameTitle) {\n        return opal(() => this._bcdice.$setGameByTitle(gameTitle));\n    }\n}\n"]}