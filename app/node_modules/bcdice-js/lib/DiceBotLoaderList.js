'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('../lib/bcdice.ruby.js');

var _opal = require('./opal');

var _opal2 = _interopRequireDefault(_opal);

var _DiceBotLoader = require('./DiceBotLoader');

var _DiceBotLoader2 = _interopRequireDefault(_DiceBotLoader);

var _utilities = require('./utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DiceBotLoaderList = function () {
    function DiceBotLoaderList() {
        _classCallCheck(this, DiceBotLoaderList);
    }

    _createClass(DiceBotLoaderList, null, [{
        key: 'find',
        value: function find(gameTitle) {
            var loader = (0, _opal2.default)(function (Opal) {
                return Opal.DiceBotLoaderList.$find(gameTitle);
            });
            if ((0, _utilities.isNil)(loader)) return null;

            return new _DiceBotLoader2.default(loader);
        }
    }]);

    return DiceBotLoaderList;
}();

exports.default = DiceBotLoaderList;
//# sourceMappingURL=DiceBotLoaderList.js.map