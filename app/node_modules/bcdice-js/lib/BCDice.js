'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-underscore-dangle: off */

require('../lib/bcdice.ruby.js');

var _opal = require('./opal');

var _opal2 = _interopRequireDefault(_opal);

var _DiceBot = require('./DiceBot');

var _DiceBot2 = _interopRequireDefault(_DiceBot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BCDice = function () {
    function BCDice() {
        _classCallCheck(this, BCDice);

        var maker = (0, _opal2.default)(function (Opal) {
            return Opal.BCDiceMaker.$new();
        });
        this._bcdice = (0, _opal2.default)(function () {
            return maker.$newBcDice();
        });
    }

    // eslint-disable-next-line no-unused-vars


    _createClass(BCDice, [{
        key: 'setDir',
        value: function setDir(dir, prefix) {
            throw new Error('Unsupported');
        }
    }, {
        key: 'isKeepSecretDice',
        value: function isKeepSecretDice(b) {
            var _this = this;

            (0, _opal2.default)(function () {
                return _this._bcdice.$isKeepSecretDice(b);
            });
        }
    }, {
        key: 'getGameType',
        value: function getGameType() {
            var _this2 = this;

            return (0, _opal2.default)(function () {
                return _this2._bcdice.$getGameType();
            });
        }
    }, {
        key: 'setDiceBot',
        value: function setDiceBot(diceBot) {
            var _this3 = this;

            if (!diceBot) return;

            if (!(diceBot instanceof _DiceBot2.default)) throw new Error('Invalit argument type');
            (0, _opal2.default)(function () {
                return _this3._bcdice.$setDiceBot(diceBot._diceBot);
            });
        }

        // eslint-disable-next-line no-unused-vars

    }, {
        key: 'setIrcClient',
        value: function setIrcClient(client) {
            throw new Error('Unimplemented');
        }
    }, {
        key: 'setMessage',
        value: function setMessage(message) {
            var _this4 = this;

            (0, _opal2.default)(function () {
                return _this4._bcdice.$setMessage(message);
            });
        }

        // eslint-disable-next-line camelcase

    }, {
        key: 'dice_command',
        value: function dice_command() {
            return this.diceCommand();
        }
    }, {
        key: 'diceCommand',
        value: function diceCommand() {
            var _this5 = this;

            return (0, _opal2.default)(function () {
                return _this5._bcdice.$dice_command();
            });
        }
    }, {
        key: 'setGameByTitle',
        value: function setGameByTitle(gameTitle) {
            var _this6 = this;

            return (0, _opal2.default)(function () {
                return _this6._bcdice.$setGameByTitle(gameTitle);
            });
        }
    }]);

    return BCDice;
}();

exports.default = BCDice;
//# sourceMappingURL=BCDice.js.map